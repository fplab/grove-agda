open import marking.prelude

open import marking.typ
open import marking.uexp
open import marking.mexp

module marking.erasure where
  mutual
    _⇒□ : ∀ {Γ τ} → (ě : Γ ⊢⇒ τ) → UExp
    (⊢_^_ {x = x} ∋x u) ⇒□ = - x ^ u
    (⊢λ x ∶ τ ∙ ě ^ u) ⇒□ = -λ x ∶ τ ∙ (ě ⇒□) ^ u
    (⊢ ě₁ ∙ ě₂ [ τ▸ ]^ u) ⇒□ = {! !}
    (⊢⸨ ě₁ ⸩∙ ě₂ [ τ!▸ ]^ u) ⇒□ = {! !}
    (⊢ℕ n ^ u) ⇒□ = {! !}
    (⊢ ě₁ + ě₂ ^ u) ⇒□ = {! !}
    (⊢⟦ ∌y ⟧^ u) ⇒□ = {! !}
    -- ⊢_ {x = x} ∋x                 ⇒□ = - x
    -- (⊢λ x ∶ τ ∙ ě)                ⇒□ = -λ x ∶ τ ∙ (ě ⇒□)
    -- ⊢ ě₁ ∙ ě₂ [ τ▸ ]              ⇒□ = - (ě₁ ⇒□) ∙ (ě₂ ⇐□)
    -- ⊢⸨ ě₁ ⸩∙ ě₂ [ τ!▸ ]           ⇒□ = - (ě₁ ⇒□) ∙ (ě₂ ⇐□)
    -- (⊢ℕ n)                        ⇒□ = -ℕ n
    -- (⊢ ě₁ + ě₂)                   ⇒□ = - (ě₁ ⇐□) + (ě₂ ⇐□)
    -- ⊢⟦_⟧ {y = y} ∌y               ⇒□ = - y

    _⇐□ : ∀ {Γ τ} → (ě : Γ ⊢⇐ τ) → UExp
    ě ⇐□ = ?
    -- ⊢λ x ∶ τ ∙ ě [ τ₃▸ ∙ τ~τ₁ ]   ⇐□ = -λ x ∶ τ ∙ (ě ⇐□)
    -- ⊢⸨λ x ∶ τ ∙ ě ⸩[ τ′!▸ ]       ⇐□ = -λ x ∶ τ ∙ (ě ⇐□)
    -- ⊢λ x ∶⸨ τ ⸩∙ ě [ τ₃▸ ∙ τ~̸τ₁ ] ⇐□ = -λ x ∶ τ ∙ (ě ⇐□)
    -- ⊢⸨ ě ⸩[ τ~̸τ′ ∙ su ]           ⇐□ = ě ⇒□
    -- ⊢∙ ě [ τ~τ′ ∙ su ]            ⇐□ = ě ⇒□

  -- synthesis totality
  -- ⊢⇐-⊢⇒ : ∀ {Γ τ} → (ě : Γ ⊢⇐ τ) → ∃[ τ′ ] Σ[ ě′ ∈ Γ ⊢⇒ τ′ ] ě ⇐□ ≡ ě′ ⇒□
  -- ⊢⇐-⊢⇒ ⊢λ x ∶ τ ∙ ě [ τ₃▸ ∙ τ~τ₁ ]
    -- with ⟨ τ′ , ⟨ ě′ , eq ⟩ ⟩ ← ⊢⇐-⊢⇒ ě rewrite eq
       -- = ⟨ τ -→ τ′ , ⟨ ⊢λ x ∶ τ ∙ ě′ , refl ⟩ ⟩
  -- ⊢⇐-⊢⇒ ⊢⸨λ x ∶ τ ∙ ě ⸩[ τ′!▸ ]
    -- with ⟨ τ′ , ⟨ ě′ , eq ⟩ ⟩ ← ⊢⇐-⊢⇒ ě rewrite eq
       -- = ⟨ τ -→ τ′ , ⟨ ⊢λ x ∶ τ ∙ ě′ , refl ⟩ ⟩
  -- ⊢⇐-⊢⇒ ⊢λ x ∶⸨ τ ⸩∙ ě [ τ₃▸ ∙ τ~̸τ₁ ]
    -- with ⟨ τ′ , ⟨ ě′ , eq ⟩ ⟩ ← ⊢⇐-⊢⇒ ě rewrite eq
       -- = ⟨ τ -→ τ′ , ⟨ ⊢λ x ∶ τ ∙ ě′ , refl ⟩ ⟩
  -- ⊢⇐-⊢⇒ (⊢⸨_⸩[_∙_] {τ′ = τ′} ě τ~̸τ′ su) = ⟨ τ′ , ⟨ ě , refl ⟩ ⟩
  -- ⊢⇐-⊢⇒ (⊢∙_[_∙_]  {τ′ = τ′} ě τ~τ′ su) = ⟨ τ′ , ⟨ ě , refl ⟩ ⟩
  --
  -- analysis totality
  -- private
    -- ⊢⇒-⊢⇐-subsume : ∀ {Γ τ τ′} → (ě : Γ ⊢⇒ τ) → (su : MSubsumable ě) → Σ[ ě′ ∈ Γ ⊢⇐ τ′ ] ě ⇒□ ≡ ě′ ⇐□
    -- ⊢⇒-⊢⇐-subsume {τ = τ} {τ′ = τ′} ě su
      -- with τ′ ~? τ 
    -- ...  | yes τ′~τ = ⟨ ⊢∙ ě [ τ′~τ ∙ su ] , refl ⟩
    -- ...  | no  τ′~̸τ = ⟨ ⊢⸨ ě ⸩[ τ′~̸τ ∙ su ] , refl ⟩

  -- ⊢⇒-⊢⇐ : ∀ {Γ τ τ′} → (ě : Γ ⊢⇒ τ) → Σ[ ě′ ∈ Γ ⊢⇐ τ′ ] ě ⇒□ ≡ ě′ ⇐□
  -- ⊢⇒-⊢⇐ (⊢⦇-⦈^ u)                       = ⟨ ⊢∙ ⊢⦇-⦈^ u [ ~-unknown₂ ∙ MSuHole ] , refl ⟩
  -- ⊢⇒-⊢⇐ ě@(⊢ ∋x)                        = ⊢⇒-⊢⇐-subsume ě MSuVar
  -- ⊢⇒-⊢⇐ {τ′ = τ′} (⊢λ x ∶ τ ∙ ě)
    -- with τ′ ▸-→?
  -- ...  | no  τ′!▸
           -- with ⟨ ě′ , eq ⟩ ← ⊢⇒-⊢⇐ ě rewrite eq
              -- = ⟨ ⊢⸨λ x ∶ τ ∙ ě′ ⸩[ τ′!▸ ] , refl ⟩
  -- ...  | yes ⟨ τ₁ , ⟨ τ₂ , τ′▸ ⟩ ⟩
           -- with τ ~? τ₁
  -- ...         | yes τ~τ₁
                  -- with ⟨ ě′ , eq ⟩ ← ⊢⇒-⊢⇐ ě rewrite eq
                     -- = ⟨ ⊢λ x ∶ τ ∙ ě′ [ τ′▸ ∙ τ~τ₁ ] , refl ⟩
  -- ...         | no  τ~̸τ₁
                  -- with ⟨ ě′ , eq ⟩ ← ⊢⇒-⊢⇐ ě rewrite eq
                     -- = ⟨ ⊢λ x ∶⸨ τ ⸩∙ ě′ [ τ′▸ ∙ τ~̸τ₁ ] , refl ⟩
  -- ⊢⇒-⊢⇐ ě@(⊢ ě₁ ∙ ě₂ [ τ▸ ])                  = ⊢⇒-⊢⇐-subsume ě MSuAp1
  -- ⊢⇒-⊢⇐ ě@(⊢⸨ ě₁ ⸩∙ ě₂ [ τ!▸ ])               = ⊢⇒-⊢⇐-subsume ě MSuAp2
  -- ⊢⇒-⊢⇐ ě@(⊢ℕ n)                              = ⊢⇒-⊢⇐-subsume ě MSuNum
  -- ⊢⇒-⊢⇐ ě@(⊢ ě₁ + ě₂)                         = ⊢⇒-⊢⇐-subsume ě MSuPlus
  -- ⊢⇒-⊢⇐ ě@(⊢⟦ ∌y ⟧)                           = ⊢⇒-⊢⇐-subsume ě MSuFree
