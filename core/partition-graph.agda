{-# OPTIONS --allow-unsolved-metas #-}

module core.partition-graph where

open import Relation.Binary.PropositionalEquality hiding(inspect)
open import Relation.Nullary hiding(¬¨_)
open import Data.Bool hiding (_<_; _‚âü_)
open import Data.List
open import Data.Maybe hiding(map) 
open import Data.Nat hiding (_+_)

open import core.logic
open import core.finite
open import core.graph

id-of-vertex : Vertex ‚Üí Ident 
id-of-vertex (V ctor ident) = ident

id-min : Ident ‚Üí Ident ‚Üí Ident  
id-min u1 u2 with u1 ‚â§ùïÄ u2 
... | true = u1
... | false = u2

-- might need to emit proofs one day
parents : Graph ‚Üí Vertex ‚Üí List(Vertex) 
parents [] v = [] 
parents ((E s v? _ _) ‚à∑ G) v with Dec.does (v ‚âüVertex v?)
parents ((E (S w _ _) _ _ _) ‚à∑ G) v | true = w ‚à∑ (parents G v) 
parents (_ ‚à∑ G) v | false = parents G v

-- might need to emit proofs one day
children : Graph ‚Üí Source ‚Üí List(Ident √ó Vertex) 
children [] s = [] 
children ((E s? _ _ _) ‚à∑ G) s with Dec.does (s ‚âüSource s?)
children ((E _ v u _) ‚à∑ G) s | true = (u , v) ‚à∑ (children G s) 
children (_ ‚à∑ G) s | false = children G s

data parent-class : Graph ‚Üí Vertex ‚Üí Set where 
  PC-NP : ‚àÄ{G v} ‚Üí parent-class G v
  PC-UP : ‚àÄ{G v} ‚Üí Vertex ‚Üí parent-class G v
  PC-MP : ‚àÄ{G v} ‚Üí parent-class G v

classify-parents : (G : Graph) ‚Üí (v : Vertex) ‚Üí parent-class G v 
classify-parents G v with parents G v 
classify-parents G v | [] = PC-NP
classify-parents G v | x ‚à∑ [] = PC-UP x
classify-parents G v | _ ‚à∑ _ ‚à∑ _ = PC-MP

data has-only-ancestor : Graph ‚Üí Vertex ‚Üí Vertex ‚Üí Set where
  HOA-base : {G : Graph} ‚Üí {v w : Vertex} ‚Üí (classify-parents G v ‚â° PC-UP w) ‚Üí (has-only-ancestor G v w)
  HOA-step : {G : Graph} ‚Üí {v w x : Vertex} ‚Üí (classify-parents G v ‚â° PC-UP w) ‚Üí (has-only-ancestor G w x) ‚Üí (has-only-ancestor G v x)

-- this predicate holds on G v w u if it is possible to follow a chain of only-parents 
-- from v to w, and u is the minimal vertex id encountered on that chain (excluding v, including w)
data only-ancestor-min-id : Graph ‚Üí Vertex ‚Üí Vertex ‚Üí Ident ‚Üí Set where 
  OAMI-base : {G : Graph} ‚Üí {v w : Vertex} ‚Üí (classify-parents G v ‚â° PC-UP w) ‚Üí only-ancestor-min-id G v w (id-of-vertex w) 
  OAMI-step : {G : Graph} ‚Üí {v w x : Vertex} ‚Üí {u : Ident} ‚Üí (only-ancestor-min-id G v w u) ‚Üí (classify-parents G w ‚â° PC-UP x) ‚Üí (only-ancestor-min-id G v x (id-min u (id-of-vertex x)))

NP-top : Graph ‚Üí Vertex ‚Üí Set 
NP-top G v = classify-parents G v ‚â° PC-NP

MP-top : Graph ‚Üí Vertex ‚Üí Set 
MP-top G v = classify-parents G v ‚â° PC-MP

U-top : Graph ‚Üí Vertex ‚Üí Set 
U-top G v = only-ancestor-min-id G v v (id-of-vertex v)

NP-inner : Graph ‚Üí Vertex ‚Üí Vertex ‚Üí Set 
NP-inner G v w = has-only-ancestor G v w √ó (NP-top G w)

MP-inner : Graph ‚Üí Vertex ‚Üí Vertex ‚Üí Set 
MP-inner G v w = has-only-ancestor G v w √ó (MP-top G w)

U-inner : Graph ‚Üí Vertex ‚Üí Vertex ‚Üí Set 
U-inner G v w = has-only-ancestor G v w √ó (U-top G w)

data class : Graph ‚Üí Vertex ‚Üí Set where 
  NPTop : ‚àÄ{G v} ‚Üí (NP-top G v) ‚Üí class G v
  MPTop : ‚àÄ{G v} ‚Üí (MP-top G v) ‚Üí class G v
  UTop : ‚àÄ{G v} ‚Üí (U-top G v) ‚Üí class G v
  NPInner : ‚àÄ{G v} ‚Üí (w : Vertex) ‚Üí (NP-inner G v w) ‚Üí class G v
  MPInner : ‚àÄ{G v} ‚Üí (w : Vertex) ‚Üí (MP-inner G v w) ‚Üí class G v
  UInner : ‚àÄ{G v} ‚Üí (w : Vertex) ‚Üí (U-inner G v w) ‚Üí class G v

only-descendants : Graph ‚Üí Vertex ‚Üí List(Vertex √ó Ident) ‚Üí Set 
only-descendants G v ws = list-forall (Œª (w , u) ‚Üí only-ancestor-min-id G w v u) ws

locate-U :  (G : Graph) ‚Üí (ws : List(Vertex √ó Ident)) ‚Üí (v : Vertex) ‚Üí (only-descendants G v ws) ‚Üí (_+_ ‚ä§ (U-top G v))
locate-U G [] v <> = Inl <>
locate-U G ((v? , u) ‚à∑ ws) v (od , ods) with (v ‚âüVertex v?) | (u ‚âüùïÄ (id-of-vertex v))
... | _ because of ∏ refl | _ because of ∏ refl = Inl <>
... | _ | _ = locate-U G ws v ods

{-# TERMINATING #-} 
-- Why? because it terminates when it hits a node with 0 or multiple parents. 
-- When it's running, it's following a chain of only-parents.
-- Since G is finite, this chain will eventually meet itself again.
-- This forms a loop. When the chain reaches the minimal-id element of the loop, it will terminate.
classify : (G : Graph) ‚Üí (ws : List(Vertex √ó Ident)) ‚Üí (v : Vertex) ‚Üí (only-descendants G v ws) ‚Üí (class G v)
classify G ws v ods with inspect (classify-parents G v)
classify G ws v ods | (PC-NP with‚â° eq) = NPTop eq
classify G ws v ods | (PC-MP with‚â° eq) = MPTop eq
classify G ws v ods | (PC-UP x with‚â° eq) with locate-U G ws v ods
classify G ws v ods | (PC-UP x with‚â° eq) | Inr utop = UTop utop
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> with classify G ((v , (id-of-vertex x)) ‚à∑ (map (Œª (w , u) ‚Üí (w , id-min u (id-of-vertex x))) ws)) x (OAMI-base eq , forall-map-implies ods (Œª {(w , u)} ‚Üí Œª oami ‚Üí OAMI-step oami eq))
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | NPTop nptop = NPInner x (HOA-base eq , nptop)
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | MPTop mptop = MPInner x (HOA-base eq , mptop)
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | UTop utop = UInner x (HOA-base eq , utop)
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | NPInner r (hoa , nptop) = NPInner r ((HOA-step eq hoa) , nptop)
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | MPInner r (hoa , mptop) = MPInner r ((HOA-step eq hoa) , mptop)
classify G ws v ods | (PC-UP x with‚â° eq) | Inl <> | UInner r (hoa , utop) = UInner r ((HOA-step eq hoa) , utop)

-- maybe this carries proofs later. e.g. NPE also holds a proof that Œµ is down from v, and that v is in NP-top
data edge-class : Graph ‚Üí Edge ‚Üí Set where 
  NPE : ‚àÄ{G Œµ} ‚Üí Vertex ‚Üí edge-class G Œµ
  MPE : ‚àÄ{G Œµ} ‚Üí Vertex ‚Üí edge-class G Œµ
  UE : ‚àÄ{G Œµ} ‚Üí Vertex ‚Üí edge-class G Œµ
  
-- assume Œµ is assigned +. In fact the whole decomp recomp thing should just consider a graph to be a set of edges, and not account for dead ones.
edge-classify : (G : Graph) ‚Üí (Œµ : Edge) ‚Üí edge-class G Œµ 
edge-classify G (E (S v _ _) _ _ _) with classify G [] v <>
... | NPTop x = NPE v 
... | MPTop x = MPE v
... | UTop x = UE v
... | NPInner w x = NPE w
... | MPInner w x = MPE w
... | UInner w x = UE w

-- not fine enough!
-- record Partitioned-Graph : Set where
--   constructor PG
--   field
--     NP : List Edge
--     MP : List Edge
--     U : List Edge

-- partition-graph-rec : Graph ‚Üí (List Edge) ‚Üí Partitioned-Graph 
-- partition-graph-rec G [] = PG [] [] []
-- partition-graph-rec G (Œµ ‚à∑ Œµs) with edge-classify G Œµ | partition-graph-rec G Œµs 
-- ... | NPE x | PG NP MP U = PG (Œµ ‚à∑ NP) MP U
-- ... | MPE x | PG NP MP U = PG NP (Œµ ‚à∑ MP) U
-- ... | UE x | PG NP MP U = PG NP MP (Œµ ‚à∑ U)
 
-- partition-graph : Graph ‚Üí Partitioned-Graph 
-- partition-graph G = partition-graph-rec G G

-- unpartition-graph : Partitioned-Graph ‚Üí Graph 
-- unpartition-graph (PG NP MP U) = NP ++ MP ++ U

list-assoc-update : List (Vertex √ó Graph) ‚Üí Vertex ‚Üí Edge ‚Üí List (Vertex √ó Graph)
list-assoc-update [] v Œµ = (v , Œµ ‚à∑ []) ‚à∑ []
list-assoc-update ((v? , Œµs) ‚à∑ l) v Œµ with Dec.does (v ‚âüVertex v?)
... | true = (v , Œµ ‚à∑ Œµs) ‚à∑ l
... | false = (v? , Œµs) ‚à∑ list-assoc-update l v Œµ

record  Partitioned-Graph : Set where
  constructor PG
  field
    NP : List (Vertex √ó Graph)
    MP : List (Vertex √ó Graph)
    U : List (Vertex √ó Graph)

partition-graph-rec : Graph ‚Üí (List Edge) ‚Üí Partitioned-Graph 
partition-graph-rec G [] = PG [] [] []
partition-graph-rec G (Œµ ‚à∑ Œµs) with edge-classify G Œµ | partition-graph-rec G Œµs 
... | NPE x | PG NP MP U = PG (list-assoc-update NP x Œµ) MP U
... | MPE x | PG NP MP U = PG NP (list-assoc-update MP x Œµ)U
... | UE x | PG NP MP U = PG NP MP (list-assoc-update U x Œµ)
 
partition-graph : Graph ‚Üí Partitioned-Graph 
partition-graph G = partition-graph-rec G G

unpartition-graph : Partitioned-Graph ‚Üí Graph 
unpartition-graph (PG NP MP U) = (concat (map (Œª (v , Œµs) ‚Üí Œµs) NP)) ++ (concat (map (Œª (v , Œµs) ‚Üí Œµs) MP)) ++ (concat (map (Œª (v , Œµs) ‚Üí Œµs) U))